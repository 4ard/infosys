import json

class Customer:
    def __init__(self, customer_id, name, address, phone, contact_person):
        self.customer_id = customer_id
        self.name = name
        self.address = address
        self.phone = phone
        self.contact_person = contact_person

class MyEntityRepJSON:
    def __init__(self, file_path):
        self.file_path = file_path

    def read(self):
        try:
            with open(self.file_path, 'r', encoding='utf-8') as file:
                data = json.load(file)
                customers = []
                for item in data:
                    customer = Customer(
                        customer_id=item.get('customer_id'),
                        name=item.get('name'),
                        address=item.get('address'),
                        phone=item.get('phone'),
                        contact_person=item.get('contact_person')
                    )
                    customers.append(customer)
                return customers
        except (FileNotFoundError, json.JSONDecodeError) as e:
            print(f"Ошибка при чтении файла: {e}")
            return []

    def write(self, customers):
        try:
            data = []
            for customer in customers:
                data.append({
                    "customer_id": customer.customer_id,
                    "name": customer.name,
                    "address": customer.address,
                    "phone": customer.phone,
                    "contact_person": customer.contact_person
                })
            with open(self.file_path, 'w', encoding='utf-8') as file:
                json.dump(data, file, ensure_ascii=False, indent=4)
            print("Данные успешно записаны в файл.")
        except Exception as e:
            print(f"Ошибка при записи файла: {e}")

    def get_customer_id(self, customer_id):
        try:
            customers = self.read()
            for customer in customers:
                if customer.customer_id == customer_id:
                    return customer
            print(f"Клиент с ID {customer_id} не найден.")
            return None
        except Exception as e:
            print(f"Ошибка при поиске клиента: {e}")
            return None

    def get_k_n_short_list(self, k, n):
    try:
        customers = self.read()
        start_index = (k - 1) * n
        end_index = start_index + n
        short_list = [
            Short(customer.customer_id, customer.name)
            for customer in customers[start_index:end_index]
        ]
        return short_list
    except Exception as e:
        print(f"Ошибка при получении списка: {e}")
        return []

    def sort_by_field(self, field):
    try:
        customers = self.read()
        if not hasattr(Customer, field):
            print(f"Ошибка: поле '{field}' не существует.")
            return []
        sorted_customers = sorted(customers, key=lambda x: getattr(x, field))
        return sorted_customers
    except Exception as e:
        print(f"Ошибка сортировки: {e}")
        return []

    def add(self, name, address, phone, contact_person):
    try:
        customers = self.read()
        new_customer = Customer(
            customer_id=None, 
            name=name,
            address=address,
            phone=phone,
            contact_person=contact_person
        )
        if new_customer in customers:
            print("Ошибка: клиент с таким номером телефона уже существует.")
            return None

        new_id = max([customer.customer_id for customer in customers], default=0) + 1
        new_customer.customer_id = new_id  # Присваиваем новый ID
        customers.append(new_customer)
        self.write(customers)
        print(f"Добавлен новый клиент с ID: {new_id}")
        return new_customer
    except Exception as e:
        print(f"Ошибка добавления: {e}")
        return None

    def delete_customer(self, customer_id):
        try:
            customers = self.read()
            filtered_customers = [customer for customer in customers if customer.customer_id != customer_id]
            if len(customers) == len(filtered_customers):
                print(f"Клиент с ID {customer_id} не найден.")
                return False
            self.write(filtered_customers)
            print(f"Клиент ID: {customer_id}, удален")
            return True
        except Exception as e:
          print(f"Ошибка при удалении: {e}")
            return False

    def change_element(self, customer_id, name=None, address=None, phone=None, contact_person=None):
    try:
        customers = self.read()
        customer_found = False

        for customer in customers:
            if customer.customer_id == customer_id:
                if phone is not None:
                    temp_customer = Customer(
                        customer_id=None,  # Временный объект для проверки
                        name=customer.name,
                        address=customer.address,
                        phone=phone,
                        contact_person=customer.contact_person
                    )
                    if temp_customer in customers and customer.phone != phone:
                        print("Ошибка: номер телефона уже используется другим клиентом.")
                        return None
                if name is not None:
                    customer.name = name
                if address is not None:
                    customer.address = address
                if phone is not None:
                    customer.phone = phone
                if contact_person is not None:
                    customer.contact_person = contact_person
                customer_found = True
                break
        if not customer_found:
            print(f"Клиент с ID {customer_id} не найден.")
            return None

        self.write(customers)
        print(f"Обновлены данные клиента ID: {customer_id}")
        return customer
    except Exception as e:
        print(f"Ошибка обновления клиента: {e}")
        return None

    def get_count(self):
        try:
            customers = self.read()
            return len(customers)
        except Exception as e:
            print(f"Ошибка при подсчёте количества клиентов: {e}")
            return 0

    def __str__(self):
        return f"Short(Id: {self.customer_id}, Name {self.name})"

if name == "__main__":
    file_path = 'E:/files/data.json'
    json_repository = MyEntityRepJSON(file_path)
    customers = json_repository.read()
    for customer in customers:
        print(f"ID: {customer.customer_id}, Имя: {customer.name}, Адрес: {customer.address}, Телефон: {customer.phone}, Контактное лицо: {customer.contact_person}")
    new_customer = Customer(
        customer_id=5,
        name="Misha",
        address="Pustova",
        phone="67897865453",
        contact_person="Ksusha"
    )
    customers.append(new_customer)
    json_repository.write(customers)
    customer = json_repository.get_customer_id(3)
    if customer:
        print(f"Клиент найден: {customer.name}, {customer.address}, {customer.phone}, {customer.contact_person}")
    k = 1
    n = 4
    short_objects = json_repository.get_k_n_short_list(k, n)
    for short_obj in short_objects:
        print(short_obj)
    sorted_customers = json_repository.phonesort()
    print(f"Список отсортированных по номеру: ")
    for customer in sorted_customers:
        print(f"ID: {customer.customer_id}, Имя: {customer.name}, Телефон: {customer.phone}")
    new_customer = json_repository.add(
        name="Akula Lev",
        address="Rashpil",
        phone="78789795643",
        contact_person="Leha zdravov"
    )
    if new_customer:
        print(f"Новый клиент: ID: {new_customer.customer_id}, Имя: {new_customer.name}")
    changed_element = json_repository.change_element(
        customer_id=2,
        name="Hello World",
        address="Chensky",
        phone="123456789",
        contact_person="ELENA"
    )
    if changed_element:
        print(f"Обновленный клиент: ID: {changed_element.customer_id}, Имя: {changed_element.name}")
    success = json_repository.delete_customer(customer_id=2)
    if success:
        print("Удаление выполнено успешно.")
    else:
        print("Ошибка при удалении.")
    count = json_repository.get_count()
    print(f"Количество клиентов: {count}")
