import uuid

class DatabaseConnection:
  
    _instance = None

    def __new__(cls, *args, **kwargs):
        if not cls._instance:
            cls._instance = super(DatabaseConnection, cls).__new__(cls)
            cls._instance._initialize()
        return cls._instance

    def _initialize(self):
        self.data = []  # Здесь данные будут храниться вместо подключения к реальной базе данных

    def execute_query(self, query_type, *args, **kwargs):
     
        if query_type == "SELECT":
            return [record for record in self.data if record["customer_id"] == kwargs.get("customer_id")]
        elif query_type == "INSERT":
            self.data.append(kwargs)
        elif query_type == "UPDATE":
            for record in self.data:
                if record["customer_id"] == kwargs.get("customer_id"):
                    record.update(kwargs)
        elif query_type == "DELETE":
            self.data = [record for record in self.data if record["customer_id"] != kwargs.get("customer_id")]

    def get_all(self):
        return self.data

class Customer:
    def __init__(self, customer_id, name, address, phone, contact_person):
        self.customer_id = customer_id
        self.name = name
        self.address = address
        self.phone = phone
        self.contact_person = contact_person

    def to_dict(self):
        return {
            "customer_id": self.customer_id,
            "name": self.name,
            "address": self.address,
            "phone": self.phone,
            "contact_person": self.contact_person
        }

    @staticmethod
    def from_dict(data):
        return Customer(
            customer_id=data["customer_id"],
            name=data["name"],
            address=data["address"],
            phone=data["phone"],
            contact_person=data["contact_person"]
        )

    def short_version(self):
        return f"{self.name} ({self.phone})"

    def __str__(self):
        return f"Customer[{self.customer_id}]: {self.name}, {self.address}, {self.phone}, {self.contact_person}"


class CustomerRepository:
    def __init__(self):
        self.db = DatabaseConnection()

    def add(self, name, address, phone, contact_person):
        customer_id = str(uuid.uuid4())
        new_customer = {
            "customer_id": customer_id,
            "name": name,
            "address": address,
            "phone": phone,
            "contact_person": contact_person
        }
        self.db.execute_query("INSERT", **new_customer)
        return customer_id

    def get_by_id(self, customer_id):
        result = self.db.execute_query("SELECT", customer_id=customer_id)
        if result:
            return Customer.from_dict(result[0])
        return None

    def update_by_id(self, customer_id, name=None, address=None, phone=None, contact_person=None):
        updates = {
            key: value for key, value in {
                "name": name,
                "address": address,
                "phone": phone,
                "contact_person": contact_person
            }.items() if value is not None
        }
        if updates:
            self.db.execute_query("UPDATE", customer_id=customer_id, **updates)

    def delete_by_id(self, customer_id):
        self.db.execute_query("DELETE", customer_id=customer_id)

    def get_all_short(self, start, count):
        all_data = self.db.get_all()
        return [f"{record['name']} ({record['phone']})" for record in all_data[start:start + count]]

    def sort_by_field(self, field):
        all_data = self.db.get_all()
        if field not in ["name", "address", "phone", "contact_person"]:
            raise ValueError(f"Поле '{field}' не существует.")
        sorted_data = sorted(all_data, key=lambda x: x[field])
        self.db.data = sorted_data

    def get_count(self):
        return len(self.db.get_all())



if __name__ == "__main__":
    repo = CustomerRepository()

  
    new_id = repo.add("Иван Иванов", "ул. Ленина, д. 5", "+79991234567", "Петр Петров")
    print(f"Добавлен клиент с ID: {new_id}")

    customer = repo.get_by_id(new_id)
    print(customer)

    
    repo.update_by_id(new_id, phone="+79995555555")
    print(repo.get_by_id(new_id))

   
    short_list = repo.get_all_short(0, 2)
    print(short_list)

    
    repo.delete_by_id(new_id)

    print(f"Общее количество клиентов: {repo.get_count()}")
