import uuid

class Customer:
    def __init__(self, customer_id, name, address, phone, contact_person):
        self.customer_id = customer_id
        self.name = name
        self.address = address
        self.phone = phone
        self.contact_person = contact_person

    def to_dict(self):
        return {
            "customer_id": self.customer_id,
            "name": self.name,
            "address": self.address,
            "phone": self.phone,
            "contact_person": self.contact_person
        }

    @staticmethod
    def from_dict(data):
        return Customer(
            customer_id=data["customer_id"],
            name=data["name"],
            address=data["address"],
            phone=data["phone"],
            contact_person=data["contact_person"]
        )

    def short_version(self):
        return f"{self.name} ({self.phone})"

    def __str__(self):
        return f"Customer[{self.customer_id}]: {self.name}, {self.address}, {self.phone}, {self.contact_person}"


class CustomerRepository:
    def __init__(self):
        self.data = []

    def add(self, name, address, phone, contact_person):
        customer_id = str(uuid.uuid4())
        new_customer = Customer(
            customer_id=customer_id,
            name=name,
            address=address,
            phone=phone,
            contact_person=contact_person
        )
        self.data.append(new_customer)
        return customer_id

    def get_by_id(self, customer_id):
        for customer in self.data:
            if customer.customer_id == customer_id:
                return customer
        return None

    def update_by_id(self, customer_id, name=None, address=None, phone=None, contact_person=None):
        customer = self.get_by_id(customer_id)
        if not customer:
            raise ValueError(f"Клиент с ID {customer_id} не найден.")
        if name:
            customer.name = name
        if address:
            customer.address = address
        if phone:
            customer.phone = phone
        if contact_person:
            customer.contact_person = contact_person

    def delete_by_id(self, customer_id):
        self.data = [customer for customer in self.data if customer.customer_id != customer_id]

    def get_all_short(self, start, count):
        return [customer.short_version() for customer in self.data[start:start + count]]

    def sort_by_field(self, field):
        if not hasattr(Customer, field):
            raise ValueError(f"Поле '{field}' не существует.")
        self.data.sort(key=lambda x: getattr(x, field))

    def get_count(self):
        return len(self.data)


class ExternalCustomerAdapter:
    def __init__(self, external_data):
        self.external_data = external_data

    def to_customer(self):
        return Customer(
            customer_id=self.external_data["id"],
            name=self.external_data["name"],
            address=self.external_data["address"],
            phone=self.external_data["phone"],
            contact_person=self.external_data["contact"]
        )


if name == "__main__":
    repo = CustomerRepository()

    external_data = {
        "id": "123", 
        "name": "Петр Петров", 
        "address": "ул. Примерная, д. 7", 
        "phone": "+79993334455", 
        "contact": "Иван Иванов"
    }

    adapter = ExternalCustomerAdapter(external_data)
    customer = adapter.to_customer()

    new_id = repo.add(customer.name, customer.address, customer.phone, customer.contact_person)
    print(f"Добавлен клиент с ID: {new_id}")

    customer = repo.get_by_id(new_id)
    print(customer)

    print(f"Общее количество клиентов: {repo.get_count()}")
