import json


class Customer:
    def __init__(self, customer_id, name, address, phone, contact_person):
        self.customer_id = customer_id
        self.name = name
        self.address = address
        self.phone = phone
        self.contact_person = contact_person

    def __eq__(self, other):
        """Сравнение объектов по номеру телефона"""
        if isinstance(other, Customer):
            return self.phone == other.phone
        return False


class Short:
    """Класс для краткого представления информации о клиенте"""
    def __init__(self, customer_id, name):
        self.customer_id = customer_id
        self.name = name

    def __str__(self):
        return f"Short(Id: {self.customer_id}, Name: {self.name})"


class MyEntityRepJSON:
    def __init__(self, file_path):
        self.file_path = file_path

    def read(self):
        try:
            with open(self.file_path, 'r', encoding='utf-8') as file:
                data = json.load(file)
                return [
                    Customer(
                        customer_id=item.get('customer_id'),
                        name=item.get('name'),
                        address=item.get('address'),
                        phone=item.get('phone'),
                        contact_person=item.get('contact_person')
                    )
                    for item in data
                ]
        except (FileNotFoundError, json.JSONDecodeError) as e:
            print(f"Ошибка при чтении файла: {e}")
            return []

    def write(self, customers):
        try:
            data = [
                {
                    "customer_id": customer.customer_id,
                    "name": customer.name,
                    "address": customer.address,
                    "phone": customer.phone,
                    "contact_person": customer.contact_person
                }
                for customer in customers
            ]
            with open(self.file_path, 'w', encoding='utf-8') as file:
                json.dump(data, file, ensure_ascii=False, indent=4)
            print("Данные успешно записаны в файл.")
        except Exception as e:
            print(f"Ошибка при записи файла: {e}")

    def get_customer_by_id(self, customer_id):
        customers = self.read()
        for customer in customers:
            if customer.customer_id == customer_id:
                return customer
        print(f"Клиент с ID {customer_id} не найден.")
        return None

    def get_k_n_short_list(self, k, n):
        try:
            customers = self.read()
            start_index = (k - 1) * n
            end_index = start_index + n
            return [Short(c.customer_id, c.name) for c in customers[start_index:end_index]]
        except Exception as e:
            print(f"Ошибка при получении списка: {e}")
            return []

    def sort_by_field(self, field):
        try:
            customers = self.read()
            if not hasattr(Customer("", "", "", "", ""), field):
                print(f"Ошибка: поле '{field}' не существует.")
                return []
            return sorted(customers, key=lambda x: getattr(x, field))
        except Exception as e:
            print(f"Ошибка сортировки: {e}")
            return []

    def add(self, name, address, phone, contact_person):
        try:
            customers = self.read()
            if any(customer.phone == phone for customer in customers):
                print("Ошибка: клиент с таким номером телефона уже существует.")
                return None

            new_id = max((c.customer_id for c in customers), default=0) + 1
            new_customer = Customer(new_id, name, address, phone, contact_person)

            customers.append(new_customer)
            self.write(customers)
            print(f"Добавлен новый клиент с ID: {new_id}")
            return new_customer
        except Exception as e:
            print(f"Ошибка добавления: {e}")
            return None

    def delete_customer(self, customer_id):
        try:
            customers = self.read()
            new_customers = [c for c in customers if c.customer_id != customer_id]
            if len(new_customers) == len(customers):
                print(f"Клиент с ID {customer_id} не найден.")
                return False
            self.write(new_customers)
            print(f"Клиент ID: {customer_id} удалён")
            return True
        except Exception as e:
            print(f"Ошибка при удалении: {e}")
            return False

    def change_element(self, customer_id, name=None, address=None, phone=None, contact_person=None):
        try:
            customers = self.read()
            for customer in customers:
                if customer.customer_id == customer_id:
                    if phone and any(c.phone == phone and c.customer_id != customer_id for c in customers):
                        print("Ошибка: номер телефона уже используется другим клиентом.")
                        return None

                    if name:
                        customer.name = name
                    if address:
                        customer.address = address
                    if phone:
                        customer.phone = phone
                    if contact_person:
                        customer.contact_person = contact_person

                    self.write(customers)
                    print(f"Обновлены данные клиента ID: {customer_id}")
                    return customer
            print(f"Клиент с ID {customer_id} не найден.")
            return None
        except Exception as e:
            print(f"Ошибка обновления клиента: {e}")
            return None

    def get_count(self):
        try:
            return len(self.read())
        except Exception as e:
            print(f"Ошибка при подсчёте количества клиентов: {e}")
            return 0


if __name__ == "__main__":
    file_path = 'E:/files/data.json'
    json_repository = MyEntityRepJSON(file_path)

    # Чтение данных
    customers = json_repository.read()
    for c in customers:
        print(f"ID: {c.customer_id}, Имя: {c.name}, Адрес: {c.address}, Телефон: {c.phone}, Контактное лицо: {c.contact_person}")

    # Добавление клиента
    new_customer = json_repository.add(
        name="Akula Lev",
        address="Rashpil",
        phone="78789795643",
        contact_person="Leha Zdravov"
    )
    if new_customer:
        print(f"Новый клиент: ID: {new_customer.customer_id}, Имя: {new_customer.name}")

    # Получение клиента по ID
    customer = json_repository.get_customer_by_id(3)
    if customer:
        print(f"Клиент найден: {customer.name}, {customer.address}, {customer.phone}, {customer.contact_person}")

    # Получение краткого списка
    k, n = 1, 4
    short_list = json_repository.get_k_n_short_list(k, n)
    for item in short_list:
        print(item)

    # Сортировка по полю
    sorted_customers = json_repository.sort_by_field("phone")
    print("Список отсортированных по номеру телефона:")
    for c in sorted_customers:
        print(f"ID: {c.customer_id}, Имя: {c.name}, Телефон: {c.phone}")

    # Обновление данных клиента
    updated_customer = json_repository.change_element(
        customer_id=2,
        name="Hello World",
        address="Chensky",
        phone="123456789",
        contact_person="ELENA"
    )
    if updated_customer:
        print(f"Обновленный клиент: ID: {updated_customer.customer_id}, Имя: {updated_customer.name}")

    # Удаление клиента
    if json_repository.delete_customer(customer_id=2):
        print("Удаление выполнено успешно.")
    else:
        print("Ошибка при удалении.")

    # Подсчет клиентов
    print(f"Количество клиентов: {json_repository.get_count()}")
