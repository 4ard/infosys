import mysql.connector
from mysql.connector import Error


class DatabaseConnection:
    """Класс для управления подключением к базе данных (Singleton)."""
    _instance = None

    def __new__(cls, *args, **kwargs):
        if not cls._instance:
            cls._instance = super(DatabaseConnection, cls).__new__(cls)
        return cls._instance

    def __init__(self, host, user, password, database):
        if not hasattr(self, "_connection"):
            try:
                self._connection = mysql.connector.connect(
                    host=host,
                    user=user,
                    password=password,
                    database=database
                )
                self._cursor = self._connection.cursor(dictionary=True)
            except Error as e:
                raise Exception(f"Ошибка подключения к базе данных: {e}")

    def execute_query(self, query, params=None):
        """Выполнение запросов к базе данных."""
        try:
            self._cursor.execute(query, params or ())
            return self._cursor.fetchall()
        except Error as e:
            self._connection.rollback()
            raise Exception(f"Ошибка выполнения запроса: {e}")

    def execute_non_query(self, query, params=None):
        """Выполнение запросов (INSERT, UPDATE, DELETE)."""
        try:
            self._cursor.execute(query, params or ())
            self._connection.commit()
            return self._cursor.lastrowid
        except Error as e:
            self._connection.rollback()
            raise Exception(f"Ошибка выполнения запроса: {e}")

    def close(self):
        """Закрытие соединения."""
        if self._cursor:
            self._cursor.close()
        if self._connection:
            self._connection.close()


class MyEntityRepDB:
    """Класс для работы с сущностью Customer, делегирует операции с БД."""
    def __init__(self, db_connection: DatabaseConnection):
        self.db = db_connection

    def get_by_id(self, customer_id):
        """Получить объект по ID."""
        query = "SELECT * FROM customers WHERE customer_id = %s"
        result = self.db.execute_query(query, (customer_id,))
        if result:
            row = result[0]
            return Customer(**row)
        return None

    def get_k_n_short_list(self, k, n):
        """Получить список k по счету n объектов класса short."""
        offset = (n - 1) * k
        query = "SELECT name, phone FROM customers ORDER BY customer_id LIMIT %s OFFSET %s"
        results = self.db.execute_query(query, (k, offset))
        return [f"{row['name']} ({row['phone']})" for row in results]

    def add(self, name, address, phone, contact_person):
        """Добавить объект в список."""
        query = """
        INSERT INTO customers (name, address, phone, contact_person)
        VALUES (%s, %s, %s, %s)
        """
        return self.db.execute_non_query(query, (name, address, phone, contact_person))

    def replace_by_id(self, customer_id, name=None, address=None, phone=None, contact_person=None):
        """Заменить элемент списка по ID."""
        updates = []
        values = []
        if name:
            updates.append("name = %s")
            values.append(name)
        if address:
            updates.append("address = %s")
            values.append(address)
        if phone:
            updates.append("phone = %s")
            values.append(phone)
        if contact_person:
            updates.append("contact_person = %s")
            values.append(contact_person)

        if updates:
            query = f"UPDATE customers SET {', '.join(updates)} WHERE customer_id = %s"
            values.append(customer_id)
            self.db.execute_non_query(query, tuple(values))

    def delete_by_id(self, customer_id):
        """Удалить элемент списка по ID."""
        query = "DELETE FROM customers WHERE customer_id = %s"
        self.db.execute_non_query(query, (customer_id,))

    def get_count(self):
        """Получить количество элементов."""
        query = "SELECT COUNT(*) AS count FROM customers"
        result = self.db.execute_query(query)
        return result[0]['count'] if result else 0


class Customer:
    def __init__(self, customer_id, name, address, phone, contact_person):
        self.customer_id = customer_id
        self.name = name
        self.address = address
        self.phone = phone
        self.contact_person = contact_person

    def short_version(self):
        return f"{self.name} ({self.phone})"

    def __str__(self):
        return f"Customer[{self.customer_id}]: {self.name}, {self.address}, {self.phone}, {self.contact_person}"


# Пример использования
if __name__ == "__main__":
    # Создание соединения (Singleton)
    db_connection = DatabaseConnection(
        host="localhost",
        user="root",
        password="password",
        database="test_db"
    )

    # Работа с репозиторием
    repo = MyEntityRepDB(db_connection)

    # Добавление клиента
    new_id = repo.add("Иван Иванов", "ул. Ленина, д. 5", "1234567890", "Петр Петров")
    print(f"Добавлен клиент с ID: {new_id}")

    # Получение клиента по ID
    customer = repo.get_by_id(new_id)
    print(customer)

    # Получение краткого списка
    short_list = repo.get_k_n_short_list(k=2, n=1)
    print(short_list)

    # Замена данных клиента
    repo.replace_by_id(new_id, phone="5555555555")
    print(repo.get_by_id(new_id))

    # Удаление клиента
    repo.delete_by_id(new_id)

    # Получение общего количества клиентов
    count = repo.get_count()
    print(f"Общее количество клиентов: {count}")

    # Закрытие соединения
    db_connection.close()
